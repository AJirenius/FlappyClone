go.property("gravity",1)
go.property("flap_strength",5)
go.property("norm_rotation",0.20)
go.property("speed_when_pointing_down",6)

function init(self)
    msg.post(".","acquire_input_focus")
    self.speed = 0
    self.is_live = true
    self.hit_ground = false
    self.game_started = false
end

function update(self, dt)
	
	if self.hit_ground == true or self.game_started == false then return end
    self.speed = self.speed - self.gravity*dt
    
    local pos = go.get_position()
    pos.y = pos.y + self.speed
    go.set_position(pos)
    
    local rot = self.norm_rotation
    if self.speed < 0 then
    	rot = rot + ((math.pi*0.5 - self.norm_rotation)/self.speed_when_pointing_down)*self.speed
    	
    end
    go.set_rotation( vmath.quat_rotation_z(rot))
end

local function flap(self)
	msg.post("/sounds#sfx_wing","play_sound")
	self.speed = self.flap_strength
end

function on_message(self, message_id, message, sender)
    if message_id == hash("start_game") then
    	self.game_started = true
    elseif message_id == hash("flap") then
    	flap(self)
    elseif message_id == hash("collision_response") then
    	msg.post("/ground", "game_over")
    	
    	if self.is_live == true then
    		if message.other_id ~= hash("/ground") then
    			msg.post("/sounds#sfx_swosh","play_sound",{ delay = 0.2 })
    			msg.post("/sounds#sfx_die","play_sound", { delay = 0.2 })
    		end
    		msg.post("/sounds#sfx_hit","play_sound")
    		
    		
    		self.is_live = false
    		self.speed = 0
    	end
    	if message.other_id == hash("/ground") then 
    		self.hit_ground = true
    		self.speed = 0 
    	end
    end
   
end

function on_input(self, action_id, action)
	if self.hit_ground == true or self.game_started == false then return end
    if self.is_live == true and action_id == hash("touch") and action.pressed == true then
    	flap(self)
    end
end

